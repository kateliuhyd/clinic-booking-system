{"ast":null,"code":"var _jsxFileName = \"/Users/kateliu/clinic-booking-system/frontend/src/components/TimeSlotModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport api from '../services/api';\nimport './TimeSlotModal.css';\n\n// This modal displays available time slots for a doctor and lets patients book appointments\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TimeSlotModal = ({\n  doctor,\n  onClose,\n  onBookingSuccess\n}) => {\n  _s();\n  const [slots, setSlots] = useState({}); // Available time slots grouped by date\n  const [loading, setLoading] = useState(true); // Loading indicator while fetching slots\n  const [selectedSlot, setSelectedSlot] = useState(null); // User-selected slot\n  const [reasonForVisit, setReasonForVisit] = useState(''); // Text input for reason\n  const [booking, setBooking] = useState(false); // Booking state\n  const navigate = useNavigate(); // Hook to programmatically navigate to other pages\n\n  // Fetch available time slots on component mount or when doctor changes\n  useEffect(() => {\n    fetchTimeSlots();\n  }, [doctor]);\n\n  // Call backend API to get available slots\n  const fetchTimeSlots = async () => {\n    try {\n      const response = await api.get(`/doctors/${doctor.doctor_id}/timeslots`);\n      setSlots(response.data.slots);\n    } catch (error) {\n      console.error('Error fetching time slots:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle user selection of a time slot\n  const handleSlotSelect = (slotId, date, time) => {\n    setSelectedSlot({\n      slotId,\n      date,\n      time\n    });\n  };\n\n  // Submit booking to backend\n  const handleBookAppointment = async () => {\n    if (!selectedSlot || !reasonForVisit.trim()) {\n      alert('Please select a time slot and enter reason for visit');\n      return;\n    }\n    setBooking(true);\n    try {\n      // Call backend to create appointment\n      await api.post('/appointments', {\n        doctor_id: doctor.doctor_id,\n        slot_id: selectedSlot.slotId,\n        reason_for_visit: reasonForVisit\n      });\n      alert('Appointment booked successfully!');\n      onBookingSuccess(); // Notify parent component (to close modal, refresh list, etc.)\n      navigate('/appointments'); // Redirect to appointments page\n    } catch (error) {\n      var _error$response, _error$response$data;\n      alert(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to book appointment');\n    } finally {\n      setBooking(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal\",\n    onClick: onClose,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      onClick: e => e.stopPropagation(),\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"close\",\n        onClick: onClose,\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Available Time Slots - \", doctor.doctor_name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"Loading time slots...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this) : Object.keys(slots).length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [Object.entries(slots).map(([date, dateSlots]) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slot-date\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: new Date(date).toLocaleDateString('en-US', {\n              weekday: 'long',\n              year: 'numeric',\n              month: 'long',\n              day: 'numeric'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-slots\",\n            children: dateSlots.map(slot => /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `slot-button ${(selectedSlot === null || selectedSlot === void 0 ? void 0 : selectedSlot.slotId) === slot.slot_id ? 'selected' : ''}`,\n              onClick: () => handleSlotSelect(slot.slot_id, date, slot.start_time),\n              children: [slot.start_time, \" - \", slot.end_time]\n            }, slot.slot_id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 17\n          }, this)]\n        }, date, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this)), selectedSlot && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"booking-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Booking Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Selected: \", new Date(selectedSlot.date).toLocaleDateString(), \" at \", selectedSlot.time]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            placeholder: \"Reason for visit...\",\n            value: reasonForVisit,\n            onChange: e => setReasonForVisit(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleBookAppointment,\n            className: \"btn btn-primary\",\n            disabled: booking,\n            children: booking ? 'Booking...' : 'Confirm Booking'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No available slots in the next 7 days\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(TimeSlotModal, \"9ZiztE5ROduvMs4NcCVkp9yXVm8=\", false, function () {\n  return [useNavigate];\n});\n_c = TimeSlotModal;\nexport default TimeSlotModal;\nvar _c;\n$RefreshReg$(_c, \"TimeSlotModal\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","api","jsxDEV","_jsxDEV","Fragment","_Fragment","TimeSlotModal","doctor","onClose","onBookingSuccess","_s","slots","setSlots","loading","setLoading","selectedSlot","setSelectedSlot","reasonForVisit","setReasonForVisit","booking","setBooking","navigate","fetchTimeSlots","response","get","doctor_id","data","error","console","handleSlotSelect","slotId","date","time","handleBookAppointment","trim","alert","post","slot_id","reason_for_visit","_error$response","_error$response$data","className","onClick","children","e","stopPropagation","fileName","_jsxFileName","lineNumber","columnNumber","doctor_name","Object","keys","length","entries","map","dateSlots","Date","toLocaleDateString","weekday","year","month","day","slot","start_time","end_time","placeholder","value","onChange","target","required","disabled","_c","$RefreshReg$"],"sources":["/Users/kateliu/clinic-booking-system/frontend/src/components/TimeSlotModal.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport api from '../services/api';\nimport './TimeSlotModal.css';\n\n// This modal displays available time slots for a doctor and lets patients book appointments\nconst TimeSlotModal = ({ doctor, onClose, onBookingSuccess }) => {\n  const [slots, setSlots] = useState({}); // Available time slots grouped by date\n  const [loading, setLoading] = useState(true); // Loading indicator while fetching slots\n  const [selectedSlot, setSelectedSlot] = useState(null); // User-selected slot\n  const [reasonForVisit, setReasonForVisit] = useState(''); // Text input for reason\n  const [booking, setBooking] = useState(false); // Booking state\n  const navigate = useNavigate(); // Hook to programmatically navigate to other pages\n\n  // Fetch available time slots on component mount or when doctor changes\n  useEffect(() => {\n    fetchTimeSlots();\n  }, [doctor]);\n\n  // Call backend API to get available slots\n  const fetchTimeSlots = async () => {\n    try {\n      const response = await api.get(`/doctors/${doctor.doctor_id}/timeslots`);\n      setSlots(response.data.slots);\n    } catch (error) {\n      console.error('Error fetching time slots:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle user selection of a time slot\n  const handleSlotSelect = (slotId, date, time) => {\n    setSelectedSlot({ slotId, date, time });\n  };\n\n  // Submit booking to backend\n  const handleBookAppointment = async () => {\n    if (!selectedSlot || !reasonForVisit.trim()) {\n      alert('Please select a time slot and enter reason for visit');\n      return;\n    }\n\n    setBooking(true);\n    try {\n      // Call backend to create appointment\n      await api.post('/appointments', {\n        doctor_id: doctor.doctor_id,\n        slot_id: selectedSlot.slotId,\n        reason_for_visit: reasonForVisit\n      });\n\n      alert('Appointment booked successfully!');\n      onBookingSuccess();         // Notify parent component (to close modal, refresh list, etc.)\n      navigate('/appointments');  // Redirect to appointments page\n    } catch (error) {\n      alert(error.response?.data?.error || 'Failed to book appointment');\n    } finally {\n      setBooking(false);\n    }\n  };\n\n  return (\n    <div className=\"modal\" onClick={onClose}>\n      <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n        <span className=\"close\" onClick={onClose}>&times;</span>\n        <h3>Available Time Slots - {doctor.doctor_name}</h3>\n\n        {loading ? (\n          <div className=\"loading\">Loading time slots...</div>\n        ) : Object.keys(slots).length > 0 ? (\n          <>\n            {/* Display slots grouped by date */}\n            {Object.entries(slots).map(([date, dateSlots]) => (\n              <div key={date} className=\"slot-date\">\n                <h4>\n                  {new Date(date).toLocaleDateString('en-US', {\n                    weekday: 'long',\n                    year: 'numeric',\n                    month: 'long',\n                    day: 'numeric'\n                  })}\n                </h4>\n                <div className=\"time-slots\">\n                  {dateSlots.map(slot => (\n                    <button\n                      key={slot.slot_id}\n                      className={`slot-button ${selectedSlot?.slotId === slot.slot_id ? 'selected' : ''}`}\n                      onClick={() => handleSlotSelect(slot.slot_id, date, slot.start_time)}\n                    >\n                      {slot.start_time} - {slot.end_time}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            ))}\n\n            {/* Booking form appears after slot is selected */}\n            {selectedSlot && (\n              <div className=\"booking-form\">\n                <h4>Booking Details</h4>\n                <p>\n                  Selected: {new Date(selectedSlot.date).toLocaleDateString()} at {selectedSlot.time}\n                </p>\n                <textarea\n                  placeholder=\"Reason for visit...\"\n                  value={reasonForVisit}\n                  onChange={(e) => setReasonForVisit(e.target.value)}\n                  required\n                />\n                <button\n                  onClick={handleBookAppointment}\n                  className=\"btn btn-primary\"\n                  disabled={booking}\n                >\n                  {booking ? 'Booking...' : 'Confirm Booking'}\n                </button>\n              </div>\n            )}\n          </>\n        ) : (\n          <p>No available slots in the next 7 days</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TimeSlotModal;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}